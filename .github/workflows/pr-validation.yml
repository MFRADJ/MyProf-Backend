name: Pull Request Validation

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-validation:
    name: Pull Request Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify Commit Signatures
        uses: actions/verify-commit-signature@v1
        with:
          verify-all: true

      - name: Conventional Commit Check
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.yml

      - name: Check Branch Naming Convention
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          if ! [[ $BRANCH_NAME =~ ^(feature|bugfix|hotfix|release)/.+ ]]; then
            echo "Branch name must start with feature/, bugfix/, hotfix/, or release/"
            exit 1
          fi

      - name: Check PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert

  review-compliance:
    name: Review Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check Required Reviews
        uses: actions/github-script@v6
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const approvals = reviews.filter(review => review.state === 'APPROVED').length;
            if (approvals < 2) {
              core.setFailed('Pull request requires at least 2 approving reviews');
            }

      - name: Check Code Owners Review
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            if (!pr.requested_reviewers.some(reviewer => 
              reviewer.login === 'code-owner-1' || 
              reviewer.login === 'code-owner-2')) {
              core.setFailed('Code owner review is required');
            }

      - name: Check Conversation Resolution
        uses: actions/github-script@v6
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const unresolvedComments = reviews.filter(review => 
              review.state === 'COMMENTED' && !review.resolved
            ).length;
            
            if (unresolvedComments > 0) {
              core.setFailed('All conversations must be resolved before merging');
            }

  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v3

      - name: Check PR Size
        uses: actions/github-script@v6
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const changes = files.reduce((acc, file) => acc + file.changes, 0);
            const MAX_CHANGES = 500;
            
            if (changes > MAX_CHANGES) {
              core.setFailed(`PR is too large. ${changes} changes exceeds limit of ${MAX_CHANGES}`);
            }
