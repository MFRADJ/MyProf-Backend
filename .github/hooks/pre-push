#!/bin/bash

# Récupère le nom de la branche locale
local_branch="$(git rev-parse --abbrev-ref HEAD)"

# Vérifie si la branche existe déjà sur remote
if ! git ls-remote --heads origin "$local_branch" | grep -q "$local_branch"; then
    # Nouvelle branche, créer l'issue via l'API GitHub
    
    # Format attendu: type/MYPROF-123-description
    if [[ $local_branch =~ ^(feature|bugfix|hotfix|release)/MYPROF-([0-9]+)-(.+)$ ]]; then
        type="${BASH_REMATCH[1]}"
        issue_number="${BASH_REMATCH[2]}"
        description="${BASH_REMATCH[3]}"
        
        # Convertit les tirets en espaces et capitalise
        title=$(echo "$description" | sed -r 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
        
        # Crée l'issue via l'API GitHub
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/owner/repo/issues \
          -d "{
            \"title\": \"[$type] $title\",
            \"body\": \"Branche: $local_branch\nType: $type\nJira: MYPROF-$issue_number\",
            \"labels\": [\"$type\"]
          }"
    fi
fi
